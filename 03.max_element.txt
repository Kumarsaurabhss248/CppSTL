1. First version
template<class ForwardIt>
ForwardIt max_element(ForwardIt first, ForwardIt last)
{
    if (first == last) return last;
 
    ForwardIt largest = first;
    ++first;
    for (; first != last; ++first) {
        if (*largest < *first) {
            largest = first;
        }
    }
    return largest;
}

2. Second version
template<class ForwardIt, class Compare>
ForwardIt max_element(ForwardIt first, ForwardIt last, 
                      Compare comp)
{
    if (first == last) return last;
 
    ForwardIt largest = first;
    ++first;
    for (; first != last; ++first) {
        if (comp(*largest, *first)) {
            largest = first;
        }
    }
    return largest;
}

std::max_element is defined inside the header file and it returns an iterator pointing to the element with the largest value in the range [first, last).
std::max_element can be used in two ways. The comparisons can be performed either usingoperator < (first version), or using a pre-defined function (second version).
If more than one element satisfies the condition of being the largest, the iterator returned points to the first of such elements. 

The two versions are defined as given below:

1.For comparing elements using “<“: 
 
 Syntax:

template 
ForwardIterator max_element (ForwardIterator first, ForwardIterator last);

first:     Forward iterator pointing to the beginning of the range.
last:     Forward iterator pointing to the end of the range.

Return Value: It returns a pointer to the largest 
element in the range, and in case if there are more than 
one such element, then it points to the first one.

It points to the last in case the range is empty.

E.G:-
// C++ program to demonstrate the use of std::max_element
#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
int v[] = { 'a', 'c', 'k', 'd', 'e', 'f', 'h' };

// Finding the maximum value between the first and the
// fourth element

int* i1;
i1 = std::max_element(v, v + 4);

cout << char(*i1) << "\n";
return 0;
}

2. For comparison based on a pre-defined function: 

template 
ForwardIterator max_element (ForwardIterator first, ForwardIterator last,
                             Compare comp);
Here, first and last are the same as previous case.
comp: Binary function that accepts two elements 
in the range as arguments, and returns a value convertible to bool.

The value returned indicates whether the element passed as first argument 
is considered less than the second.
The function shall not modify any of its arguments.
This can either be a function pointer or a function object.

Return Value: It returns a pointer to the largest element 
in the range, and in case if there are more than one such element,
then it points to the first one.
It points to the last in case the range is empty.

E.G:-
// C++ program to demonstrate the use of std::max_element
#include <iostream>
#include <algorithm>
using namespace std;

// Defining the BinaryFunction
bool comp(int a, int b)
{
return (a < b);
}

int main()
{
int v[] = { 9, 4, 7, 2, 5, 10, 11, 12, 1, 3, 6 };

// Finding the maximum value between the third and the
// ninth element

int* i1;
i1 = std::max_element(v + 2, v + 9, comp);

cout << *i1 << "\n";
return 0;
}

