1. First version
template<class T> 
const T& min(const T& a, const T& b)
{
    return (b < a) ? b : a;
}

2. Second version
template<class T, class Compare> 
const T& min(const T& a, const T& b, Compare comp)
{
    return (comp(b, a)) ? b : a;
}

3. Third version
template<class T>
T min( std::initializer_list<T> ilist)
{
    return *std::min_element(ilist.begin(), ilist.end());
}

4. Fourth version
template<class T, class Compare>
T min(std::initializer_list<T> ilist, Compare comp)
{
    return *std::min_element(ilist.begin(), ilist.end(), comp);
}

std::min is defined in the header file <algorithm> and is used to find out the smallest of the number passed to it. It returns the first of them, if there are more
than one. 

It can be used in following 3 manners: 
 
It compares the two numbers passed in its arguments and returns the smaller of the two, and if both are equal, then it returns the first one. 
 
It can also compare the two numbers using a binary function , which is defined by the user, and then passed as argument in std::min(). 
 
It is also useful if we want to find the smallest element in a given list, and it returns the first one if there are more than one present in the list. 

1. For comparing elements using < :
Syntax: 
template  constexpr const T& min (const T& a, const T& b);

a and b are the numbers to be compared.
Returns: Smaller of the two values.
 
E.g:
// C++ program to demonstrate the use of std::min
#include <iostream>
#include <algorithm>
using namespace std;
int main()
{
int a = 5;
int b = 7;
cout << std::min(a, b) << "\n";

// Returns the first one if both the numbers
// are same
cout << std::min(7, 7);

return 0;
}

2. For comparing elements using a pre-defined function:

template
constexpr const T& min (const T& a, const T& b, Compare comp);

Here, a and b are the numbers to be compared.

comp: Binary function that accepts two values of type T as arguments,
and returns a value convertible to bool. The value returned indicates whether the 
element passed as first argument is considered less than the second.
The function shall not modify any of its arguments.
This can either be a function pointer or a function object.
Returns: Smaller of the two values.

// C++ program to demonstrate the use of std::min
#include <iostream>
#include <algorithm>
using namespace std;

// Defining the binary function
bool comp(int a, int b)
{
return (a < b);
}
int main()
{
int a = 5;
int b = 7;
cout << std::min(a, b, comp) << "\n";

// Returns the first one if both the numbers
// are same
cout << std::min(7, 7, comp);

return 0;
}

3. For finding the minimum element in a list: 

template 
constexpr T min (initializer_list il, Compare comp);

comp is optional and can be skipped.
il: An initializer_list object.
Returns: Smallest of all the values.

// C++ program to demonstrate the use of std::min
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

// Defining the binary function
bool comp(int a, int b)
{
return (a < b);
}
int main()
{

// Finding the smallest of all the numbers
cout << std::min({ 1, 2, 3, 4, 5, 0, -1, 7 }, comp) << "\n";

return 0;
}
