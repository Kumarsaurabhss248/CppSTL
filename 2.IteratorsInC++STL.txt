//Iterator example begin(),end(),prev(),next(),advance() functions

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main(){
    vector<int> v={10,20,30,40,50};
    vector<int> :: iterator it=v.begin(); //auto it=v.begin()
    cout<<(*it)<<endl;
    it++;
    cout<<(*it)<<endl;
    it=v.end();
    it--;
    cout<<(*it)<<endl;
    return 0;
}
O/P:-
10
20
50

//next() and prev() function (returns an iterator)

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main(){
    vector<int> v={10,20,30,40,50};
    vector<int> :: iterator it=v.begin(); //auto it=v.begin()
    it=next(it);  //20
    cout<<(*it)<<endl;
    it=next(it,2); //40
    cout<<(*it)<<endl;
    it=prev(it); //30
    cout<<(*it)<<endl;
    return 0;
}

//advance() function (modifies the same passed iterator)

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main(){
    vector<int> v={10,20,30,40,50};
    vector<int> :: iterator it=v.begin(); //auto it=v.begin()
    advance(it,3);
    cout<<(*it);
    return 0;
}

/*  Input           Output
         \         /
           Forward
              |
         Bidirectional
              |
           Random
           
            forward_list   Forward
   Simple:- list           Bidirectional
            vector         Random
            
                  set     \
                  map      \
    Associative:- multimap  / Bidirectional
                  multiset /
                  
                  unordered_set \  
                                  Forward
                  unordered_map /  
            
                queue\     
     Adapters:- stack \________ Do not have iterators
                priority_queue /
 
 If iterator is random iterator then next,prev and advance function will take O(1) time, If input iterator is forward iterator then it will increment one by one
 and it will take O(n) time.
 */
